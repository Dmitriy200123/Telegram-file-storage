version: '3.9'

services:
  dotnet_backend:
    container_name: dotnet_backend
    build:
      context: FileStorageApp/
      dockerfile: Dockerfile
      target: runtime_FileStorageAPI
    environment:
      - ASPNETCORE_URLS=http://0.0.0.0:5001
      - ASPNETCORE_ENVIRONMENT=Docker
    ports:
      - '5001:5001'

  dotnet_search_backend:
    container_name: dotnet_search_backend
    build:
      context: FileStorageApp/
      dockerfile: Dockerfile
      target: runtime_SearchDocumentsAPI
    environment:
      - ASPNETCORE_URLS=http://0.0.0.0:5002
      - ASPNETCORE_ENVIRONMENT=Docker
    ports:
      - '5002:5002' 
  
  dotnet_classification_backend:
    container_name: dotnet_classification_backend
    build:
      context: FileStorageApp/
      dockerfile: Dockerfile
      target: runtime_DocumentClassificationsAPI
    environment:
      - ASPNETCORE_URLS=http://0.0.0.0:5003
      - ASPNETCORE_ENVIRONMENT=Docker
    ports:
      - '5003:5003'
    

  front:
    container_name: front
    build:
      context: file-storage-front/
      dockerfile: Dockerfile
      args:
        Develop: "true"
    ports:
      - '3000:3000'
    depends_on:
      - dotnet_backend

  telegram_auth:
    container_name: telegram_auth
    build:
      context: FileStorageApp/
      dockerfile: TelegramAuth/Dockerfile
    environment:
      - ASPNETCORE_ENVIRONMENT=Docker

  telegram_loader:
    container_name: telegram_loader
    build:
      context: telegram_file_loader/
      dockerfile: Dockerfile
    tty: true
    stdin_open: true
    environment:
      - Test="true"
      - DB_HOST=postgres
      - DB_PORT=5432
      - DB_NAME=FileStorageApp
      - DB_USER=FileStorageApp
      - DB_PASS=change
      - S3_URL=http://s3:4566
      - BUCKET_NAME=test
      - AWS_ACCESS_KEY_ID="123"
      - AWS_SECRET_ACCESS_KEY="123"
      - SEARCH_DOCUMENT_URL=http://dotnet_search_backend:5002/api
        
              
  s3:
    image: localstack/localstack:0.13
    container_name: s3
    ports:
      - 4566:4566
    environment:
      - AWS_ACCESS_KEY_ID=123
      - AWS_SECRET_ACCESS_KEY=123
      - SERVICES=s3,sns,sqs
      - DEBUG=1
      - DATA_DIR=/tmp/localstack/data
    volumes:
      - "localstack-vol:/tmp/localstack"
      - "./DbScripts/initS3.sh:/docker-entrypoint-initaws.d/buckets.sh"
    deploy:
      resources:
        limits:
          cpus: '4'
          memory: 1500M

  postgres:
    image: postgres
    container_name: postgres
    environment:
      - POSTGRES_USER=FileStorageApp
      - POSTGRES_PASSWORD=change
      - POSTGRES_DB=FileStorageApp
    ports:
      - "5432:5432"
    volumes:
      - ./DbScripts/fileStorageTables.sql:/docker-entrypoint-initdb.d/init.sql
      - pg-data:/var/lib/postgresql/data

  elasticsearch:
    build:
      context: ElasticSearch/
      dockerfile: Dockerfile
    container_name: elasticsearch
    environment:
      - xpack.security.enabled=false
      - discovery.type=single-node
    ulimits:
      memlock:
        soft: -1
        hard: -1
      nofile:
        soft: 65536
        hard: 65536
    cap_add:
      - IPC_LOCK
    volumes:
      - elasticsearch-data:/usr/share/elasticsearch/data
    ports:
      - 9200:9200
      - 9300:9300

#  kibana:
#    container_name: kibana
#    image: docker.elastic.co/kibana/kibana:7.4.0
#    environment:
#      - ELASTICSEARCH_HOSTS=http://elasticsearch:9200
#    ports:
#      - 5601:5601
#    depends_on:
#      - elasticsearch

volumes:
  localstack-vol:
  pg-data:
  elasticsearch-data:
